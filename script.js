const db = {
  truths: [
    "–ö–æ–µ –µ –Ω–∞–π-—Å—Ä–∞–º–Ω–æ—Ç–æ –Ω–µ—â–æ, –∫–æ–µ—Ç–æ —Å–∏ –ø—Ä–∞–≤–∏–ª?",
    "–ê–∫–æ –º–æ–∂–µ—à–µ –¥–∞ —Å–µ —Å—Ä–µ—â–Ω–µ—à —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞ –ª–∏—á–Ω–æ—Å—Ç, –∫–æ—è –±–∏ –±–∏–ª–∞ —Ç—è?",
    "–ö–æ–≥–∞ –ø–æ—Å–ª–µ–¥–Ω–æ –∏–∑–ª—ä–≥–∞ –∏ –∑–∞—â–æ?",
    "–ö–∞–∫–≤–æ —Ö–æ—Ä–∞—Ç–∞ –Ω–µ –∑–Ω–∞—è—Ç –∑–∞ —Ç–µ–±?",
    "–ö–æ–π –µ –Ω–∞–π-–≥–æ–ª–µ–º–∏—è—Ç —Ç–∏ —Å—Ç—Ä–∞—Ö?",
    "–ö–æ—è –µ –Ω–∞–π-–≥–æ–ª—è–º–∞—Ç–∞ —Ç–∏ —Ç–∞–π–Ω–∞?",
    "–°–ª—É—á–≤–∞–ª–æ –ª–∏ —Ç–∏ —Å–µ –µ –¥–∞ —Å–µ –≤–ª—é–±–∏—à –≤ –ø—Ä–∏—è—Ç–µ–ª?",
    "–ö–æ–π –µ –Ω–∞–π-–ª–æ—à–∏—è—Ç –ø–æ–¥–∞—Ä—ä–∫, –∫–æ–π—Ç–æ —Å–∏ –ø–æ–ª—É—á–∞–≤–∞–ª?",
    "–ë–∏ –ª–∏ –∏–∑–ª–∏–∑–∞–ª/–∞ —Å –Ω—è–∫–æ–π –æ—Ç –ø—Ä–∏—Å—ä—Å—Ç–≤–∞—â–∏—Ç–µ?",
    "–ö–æ–π –µ –Ω–∞–π-—Å–º–µ—à–Ω–∏—è—Ç –º–æ–º–µ–Ω—Ç –≤ –∂–∏–≤–æ—Ç–∞ —Ç–∏?",
    "–ö–æ–µ –µ –Ω–∞–π-—Å—Ä–∞–º–Ω–æ—Ç–æ –Ω–µ—â–æ, –∫–æ–µ—Ç–æ —Ç–∏ —Å–µ –µ —Å–ª—É—á–≤–∞–ª–æ?",
    "–ö–∞–∫–≤–æ –µ –µ–¥–Ω–æ –Ω–µ—â–æ, –∑–∞ –∫–æ–µ—Ç–æ —Å—ä–∂–∞–ª—è–≤–∞—à, —á–µ —Å–∏ –Ω–∞–ø—Ä–∞–≤–∏–ª/–∞?",
    "–ö–æ–µ –µ –Ω–∞–π-—â—É—Ä–æ—Ç–æ –º—è—Å—Ç–æ, –Ω–∞ –∫–æ–µ—Ç–æ —Å–∏ –∑–∞—Å–ø–∏–≤–∞–ª/–∞?",
    "–ö–æ—è –µ –Ω–∞–π-–≥–æ–ª—è–º–∞—Ç–∞ —Ç–∏ –º–µ—á—Ç–∞?",
    "–ê–∫–æ –º–æ–∂–µ—à–µ –¥–∞ —Å–º–µ–Ω–∏—à –∂–∏–≤–æ—Ç–∞ —Å–∏ —Å –Ω—è–∫–æ–≥–æ –∑–∞ –µ–¥–∏–Ω –¥–µ–Ω, –∫–æ–π –±–∏ –±–∏–ª —Ç–æ–π –∏ –∑–∞—â–æ?",
    "–ö–æ–µ –µ –Ω–∞–π-—Å—Ç—Ä–∞–Ω–Ω–æ—Ç–æ –Ω–µ—â–æ, –∫–æ–µ—Ç–æ —Å–∏ —è–ª/–∞?",
    "–ê–∫–æ –º–æ–∂–µ—à–µ –¥–∞ –∏–º–∞—à –µ–¥–Ω–∞ —Å—É–ø–µ—Ä—Å–∏–ª–∞, –∫–æ—è –±–∏ –±–∏–ª–∞ —Ç—è?",
    "–ö–æ–π –µ –Ω–∞–π-–≥–ª—É–ø–∞–≤–∏—è—Ç –ø–æ–¥–∞—Ä—ä–∫, –∫–æ–π—Ç–æ –Ω—è–∫–æ–≥–∞ —Å–∏ –ø–æ–ª—É—á–∞–≤–∞–ª/–∞?",
    "–ö–æ–µ –µ –Ω–µ—â–æ, –∫–æ–µ—Ç–æ –Ω–∏–∫–æ–π —Ç—É–∫ –Ω–µ –∑–Ω–∞–µ –∑–∞ —Ç–µ–±?",
    "–ê–∫–æ –º–æ–∂–µ—à–µ –¥–∞ –ø—ä—Ç—É–≤–∞—à –Ω–∞–∑–∞–¥ –≤—ä–≤ –≤—Ä–µ–º–µ—Ç–æ, –∫—ä–¥–µ –±–∏ –æ—Ç–∏—à—ä–ª/–ª–∞ –∏ –∑–∞—â–æ?",
    "–ö–æ–π –µ –Ω–∞–π-–≥–æ–ª–µ–º–∏—è—Ç —Ç–∏ —Å—Ç—Ä–∞—Ö?",
    "–ö–æ–µ –µ –Ω–∞–π-–≥–æ–ª—è–º–æ—Ç–æ —Ç–∏ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, —Å –∫–æ–µ—Ç–æ —Å–µ –≥–æ—Ä–¥–µ–µ—à?",
    "–ö–æ–µ –µ –Ω–µ—â–æ, –∫–æ–µ—Ç–æ —Ç–µ –¥—Ä–∞–∑–Ω–∏ –≤ –Ω—è–∫–æ–≥–æ —Ç—É–∫?",
    "–ö–æ–µ –µ –ª—é–±–∏–º–æ—Ç–æ —Ç–∏ —Å–ø–æ–º–µ–Ω –æ—Ç –¥–µ—Ç—Å—Ç–≤–æ—Ç–æ?",
    "–ê–∫–æ —Ç—Ä—è–±–≤–∞—à–µ –¥–∞ –∂–∏–≤–µ–µ—à –≤ –∫–Ω–∏–≥–∞, —Ñ–∏–ª–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª, –∫–æ–µ –±–∏ –∏–∑–±—Ä–∞–ª/–∞?",
    "–ö–∞–∫–≤–æ –µ –Ω–∞–π-–Ω–µ—É–¥–æ–±–Ω–æ—Ç–æ –Ω–µ—â–æ, –∫–æ–µ—Ç–æ —Å–∏ –ø—Ä–∞–≤–∏–ª/–∞ –Ω–∞ –ø—ä—Ä–≤–∞ —Å—Ä–µ—â–∞?",
    "–ö–æ—è –µ –Ω–∞–π-—Å—Ç—Ä–∞–Ω–Ω–∞—Ç–∞ —Ç–∏ —Ñ–æ–±–∏—è?",
    "–ö–æ–π –µ —á–æ–≤–µ–∫—ä—Ç, –Ω–∞ –∫–æ–≥–æ—Ç–æ —Å–µ –≤—ä–∑—Ö–∏—â–∞–≤–∞—à –Ω–∞–π-–º–Ω–æ–≥–æ –∏ –∑–∞—â–æ?",
    "–ê–∫–æ –º–æ–∂–µ—à–µ –¥–∞ –≥–æ–≤–æ—Ä–∏—à —Å –∂–∏–≤–æ—Ç–Ω–∏, –∫–∞–∫–≤–æ –±–∏ –≥–∏ –ø–æ–ø–∏—Ç–∞–ª/–∞?",
    "–ö–∞–∫–≤–∞ –µ –µ–¥–Ω–∞ –ª–æ—à–∞ –Ω–∞–≤–∏—á–∫–∞, –æ—Ç –∫–æ—è—Ç–æ –∏—Å–∫–∞—à –¥–∞ —Å–µ –æ—Ç—ä—Ä–≤–µ—à?",
    "–ö–æ–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–æ —Å–∏ –ø–ª–∞–∫–∞–ª/–∞ –∏ –∑–∞—â–æ?",
    "–ö–æ–π –µ –ª—é–±–∏–º–∏—è—Ç —Ç–∏ —Ñ–∏–ª–º –∏ –∑–∞—â–æ?",
    "–ö–æ–µ –µ –Ω–∞–π-—Å–º–µ—à–Ω–æ—Ç–æ –Ω–µ—â–æ, –∫–æ–µ—Ç–æ —Å–∏ —á—É–≤–∞–ª/–∞ –Ω—è–∫–æ–π –¥–∞ –∫–∞–∑–≤–∞ –Ω–∞—Å—ä–Ω?",
    "–ö–∞–∫–≤–æ –µ –µ–¥–Ω–æ –Ω–µ—â–æ, –∫–æ–µ—Ç–æ –Ω–µ –º–æ–∂–µ—à –¥–∞ –∂–∏–≤–µ–µ—à –±–µ–∑ –Ω–µ–≥–æ?",
    "–ö–∞–∫–≤–∞ –µ –∏–¥–µ–∞–ª–Ω–∞—Ç–∞ —Ç–∏ –ø–æ—á–∏–≤–∫–∞?",
    "–ö–æ–µ –µ –Ω–∞–π-—Ö—É–±–∞–≤–æ—Ç–æ –Ω–µ—â–æ, –∫–æ–µ—Ç–æ –Ω—è–∫–æ–π –µ –Ω–∞–ø—Ä–∞–≤–∏–ª –∑–∞ —Ç–µ–±?",
    "–ê–∫–æ –º–æ–∂–µ—à–µ –¥–∞ –±—ä–¥–µ—à –Ω—è–∫–∞–∫—ä–≤ –ø—Ä–µ–¥–º–µ—Ç, –∫–∞–∫—ä–≤ –±–∏ –±–∏–ª?",
    "–ö–æ–µ –µ –Ω–∞–π-–≥–æ–ª—è–º–æ—Ç–æ —Ç–∏ —Ä–∞–∑—Ö–∏—â–µ–Ω–∏–µ?",
    "–ö–∞–∫–≤–æ –µ –µ–¥–∏–Ω –º–∏—Ç –∑–∞ —Ç–µ–±, –∫–æ–π—Ç–æ –Ω–µ –µ –≤–µ—Ä–µ–Ω?",
    "–ö–æ–π –µ –±–∏–ª –Ω–∞–π-—Ç—Ä—É–¥–Ω–∏—è—Ç –º–æ–º–µ–Ω—Ç –≤ –∂–∏–≤–æ—Ç–∞ —Ç–∏ –∏ –∫–∞–∫ —Å–µ —Å–ø—Ä–∞–≤–∏?"
  ],
  dares: [
    "–ò–∑–ø–µ–π —á–∞—Å—Ç –æ—Ç –ª—é–±–∏–º–∞—Ç–∞ —Å–∏ –ø–µ—Å–µ–Ω.",
    "–ù–∞–ø—Ä–∞–≤–∏ 10 –∫–ª—è–∫–∞–Ω–∏—è.",
    "–ò–º–∏—Ç–∏—Ä–∞–π –∏–∑–≤–µ—Å—Ç–µ–Ω —á–æ–≤–µ–∫.",
    "–†–∞–∑—Å–º–µ–π —á–æ–≤–µ–∫–∞ –æ—Ç–ª—è–≤–æ.",
    "–¢–∞–Ω—Ü—É–≤–∞–π –±–µ–∑ –º—É–∑–∏–∫–∞ 30 —Å–µ–∫—É–Ω–¥–∏.",
    "–ò–∑–±–µ—Ä–∏ —á–æ–≤–µ–∫ –∏ –º—É –∫–∞–∂–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç.",
    "–ö–∞–∂–∏ –∞–∑–±—É–∫–∞—Ç–∞ –Ω–∞–æ–±—Ä–∞—Ç–Ω–æ.",
    "–ù–∞–ø—Ä–∞–≤–∏ –∑–∞–±–∞–≤–Ω–æ –∂–∏–≤–æ—Ç–∏–Ω—Å–∫–æ –∏–∑—Ä–∞–∂–µ–Ω–∏–µ.",
    "–ò–∑–∏–≥—Ä–∞–π —Å—Ü–µ–Ω–∞ –æ—Ç —Ñ–∏–ª–º.",
    "–û–ø–∏—à–∏ —Å–µ–±–µ —Å–∏ —Å —Ç—Ä–∏ —Å–º–µ—à–Ω–∏ –¥—É–º–∏.",
    "–ò–∑–ø–µ–π —á–∞—Å—Ç –æ—Ç –ª—é–±–∏–º–∞—Ç–∞ —Å–∏ –ø–µ—Å–µ–Ω.",
    "–ù–∞–ø—Ä–∞–≤–∏ 10 –∫–æ—Ä–µ–º–Ω–∏ –ø—Ä–µ—Å–∏.",
    "–ò–º–∏—Ç–∏—Ä–∞–π –∏–∑–≤–µ—Å—Ç–µ–Ω —á–æ–≤–µ–∫ –∑–∞ 30 —Å–µ–∫—É–Ω–¥–∏.",
    "–ö–∞–∂–∏ –Ω–∞ —á–æ–≤–µ–∫—ä—Ç –æ—Ç–¥—è—Å–Ω–æ –Ω–µ—â–æ, –∫–æ–µ—Ç–æ —Ö–∞—Ä–µ—Å–≤–∞—à –≤ –Ω–µ–≥–æ/–Ω–µ—è.",
    "–¢–∞–Ω—Ü—É–≤–∞–π –±–µ–∑ –º—É–∑–∏–∫–∞ –∑–∞ 1 –º–∏–Ω—É—Ç–∞.",
    "–ì–æ–≤–æ—Ä–∏ –∫–∞—Ç–æ —Ä–æ–±–æ—Ç –¥–æ –∫—Ä–∞—è –Ω–∞ —Å–ª–µ–¥–≤–∞—â–∏—è –∫—Ä—ä–≥.",
    "–ù–∞–ø—Ä–∞–≤–∏ —Å–∏ —Å–µ–ª—Ñ–∏ —Å –Ω–∞–π-—Å–º–µ—à–Ω–æ—Ç–æ –∏–∑—Ä–∞–∂–µ–Ω–∏–µ –∏ –≥–æ –ø–æ–∫–∞–∂–∏ –Ω–∞ –≤—Å–∏—á–∫–∏.",
    "–û–ø–∏—Ç–∞–π —Å–µ –¥–∞ –¥–æ–∫–æ—Å–Ω–µ—à –Ω–æ—Å–∞ —Å–∏ —Å –µ–∑–∏–∫.",
    "–†–∞–∑–∫–∞–∂–∏ –µ–¥–Ω–∞ –º–Ω–æ–≥–æ –ª–æ—à–∞ —à–µ–≥–∞.",
    "–ù–∞–ø—Ä–∞–≤–∏ 5 –ª–∏—Ü–µ–≤–∏ –æ–ø–æ—Ä–∏.",
    "–°–º–µ–Ω–∏ —Å–∏ –º—è—Å—Ç–æ—Ç–æ —Å —á–æ–≤–µ–∫, –∫–æ–π—Ç–æ –Ω–æ—Å–∏ —Å—ä—â–∏—è —Ü–≤—è—Ç –¥—Ä–µ—Ö–∏ –∫–∞—Ç–æ —Ç–µ–±.",
    "–ü–∏–π —á–∞—à–∞ –≤–æ–¥–∞ –Ω–∞ –µ–¥–∏–Ω –¥—ä—Ö.",
    "–û–ø–∏—à–∏ —á–æ–≤–µ–∫–∞ –æ—Ç–ª—è–≤–æ, –±–µ–∑ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞—à –Ω–µ–≥–æ–≤–æ—Ç–æ/–Ω–µ–π–Ω–æ—Ç–æ –∏–º–µ.",
    "–ü–æ—Å—Ç–∞–≤–∏ —Å–∏ –ª—ä–∂–∏—Ü–∞ –Ω–∞ –Ω–æ—Å–∞ –∑–∞ 10 —Å–µ–∫—É–Ω–¥–∏.",
    "–°—Ç–æ–π –Ω–∞ –µ–¥–∏–Ω –∫—Ä–∞–∫, –¥–æ–∫–∞—Ç–æ –Ω–µ –¥–æ–π–¥–µ —Ç–≤–æ—è—Ç —Ä–µ–¥ –æ—Ç–Ω–æ–≤–æ.",
    "–ò–∑—Å–≤–∏—Ä–∏ –ª—é–±–∏–º–∞—Ç–∞ —Å–∏ –º–µ–ª–æ–¥–∏—è, –∫–∞—Ç–æ —Ç–∞–Ω–∞–Ω–∏–∫–∞—à —Å —É—Å—Ç–∞.",
    "–û—Ç–∏–¥–∏ –∏ –¥–æ–Ω–µ—Å–∏ –Ω–µ—â–æ –Ω–µ–æ–±–∏—á–∞–π–Ω–æ –æ—Ç –¥—Ä—É–≥–∞ —Å—Ç–∞—è.",
    "–û–ø–∏—Ç–∞–π —Å–µ –¥–∞ –ª–∏–∑–Ω–µ—à –ª–∞–∫—ä—Ç—è —Å–∏.",
    "–ù–∞–ø—Ä–∞–≤–∏ –Ω–∞–π-–ª–æ—à–∞—Ç–∞ —Å–∏ –∏–º–∏—Ç–∞—Ü–∏—è –Ω–∞ –∂–∏–≤–æ—Ç–Ω–æ.",
    "–†–∞–∑–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—è —Å —Ç—Ä–∏ –¥—É–º–∏.",
    "–û–ø–∏—Ç–∞–π —Å–µ –¥–∞ –∂–æ–Ω–≥–ª–∏—Ä–∞—à —Å 3 –ø—Ä–µ–¥–º–µ—Ç–∞.",
    "–ù–∞–ø—Ä–∞–≤–∏ –º–æ—Å—Ç/—Å—Ç–æ–π–∫–∞ –Ω–∞ —Ä—ä—Ü–µ (–∞–∫–æ –µ –±–µ–∑–æ–ø–∞—Å–Ω–æ).",
    "–ü–æ–∑–¥—Ä–∞–≤–∏ –Ω—è–∫–æ–π –Ω–∞ —É–ª–∏—Ü–∞—Ç–∞/–æ—Ç –±–∞–ª–∫–æ–Ω–∞, –∫–æ–π—Ç–æ –º–∏–Ω–∞–≤–∞ –æ—Ç–≤—ä–Ω.",
    "–ù–∞—Ä–∏—Å—É–≤–∞–π –Ω–µ—â–æ —Å –æ—á–∏—Ç–µ —Å–∏ –∑–∞—Ç–≤–æ—Ä–µ–Ω–∏ –∏ –Ω–∞–∫–∞—Ä–∞–π –¥—Ä—É–≥–∏—Ç–µ –¥–∞ –ø–æ–∑–Ω–∞—è—Ç –∫–∞–∫–≤–æ –µ.",
    "–û–ø–∏—Ç–∞–π —Å–µ –¥–∞ –Ω–µ –º–∏–≥–∞—à –∑–∞ 1 –º–∏–Ω—É—Ç–∞.",
    "–ü—Ä–µ—Å—Ç—Ä—É–≤–∞–π —Å–µ, —á–µ —Å–∏ –º–∞–Ω–µ–∫–µ–Ω –∑–∞ 30 —Å–µ–∫—É–Ω–¥–∏.",
    "–ò–∑–º–∏—Å–ª–∏ —Ä–∞–ø –∑–∞ —á–æ–≤–µ–∫–∞ –æ—Ç—Å—Ä–µ—â–∞.",
    "–ü–æ–∑–≤–æ–ª–∏ –Ω–∞ –Ω—è–∫–æ–≥–æ –¥–∞ —Ç–∏ –Ω–∞—Ä–∏—Å—É–≤–∞ –Ω–µ—â–æ –Ω–∞ –ª–∏—Ü–µ—Ç–æ —Å –º–∞—Ä–∫–µ—Ä (–∫–æ–π—Ç–æ —Å–µ —Ç—Ä–∏–µ)."
  ],
  usedTruths: [],
  usedDares: []
};

function getRandomItem(type) {
  let list = db[type];
  let usedList = db["used" + type.charAt(0).toUpperCase() + type.slice(1)];

  if (usedList.length === list.length) usedList.length = 0;

  let item;
  do {
    item = list[Math.floor(Math.random() * list.length)];
  } while (usedList.includes(item));

  usedList.push(item);
  return item;
}

function showTruth() {
  const output = document.getElementById("output");
  output.textContent = getRandomItem("truths");
  output.classList.remove("initial-message");
}

function showDare() {
  const output = document.getElementById("output");
  output.textContent = getRandomItem("dares");
  output.classList.remove("initial-message");
}

let players = [];
let currentPlayerIndex = 0;
let gameStarted = false;

document.addEventListener('DOMContentLoaded', function() {
  setupPlayers();
});

function setupPlayers() {
  const count = parseInt(document.getElementById('playerCount').value);
  players = [];
  for (let i = 0; i < count; i++) {
    players.push({
      name: `–ò–≥—Ä–∞—á ${i + 1}`,
      score: 0
    });
  }
}

function startGame() {
  gameStarted = true;
  currentPlayerIndex = 0;

  document.getElementById('playerSetup').style.display = 'none';
  document.getElementById('playersContainer').style.display = 'block';
  document.getElementById('actionButtons').style.display = 'flex';
  document.getElementById('finishGameBtn').style.display = 'block';

  renderPlayers();
  updateCurrentPlayer();
}

function renderPlayers() {
  const container = document.getElementById('playersContainer');
  container.innerHTML = '';

  players.forEach((player, index) => {
    const playerDiv = document.createElement('div');
    playerDiv.className = 'player';
    playerDiv.id = `player-${index}`;

    playerDiv.innerHTML = `
      <input type="text" value="${player.name}" onchange="updatePlayerName(${index}, this.value)" maxlength="15">
      <div class="player-score">${player.score}</div>
    `;

    container.appendChild(playerDiv);
  });
}

function updatePlayerName(index, name) {
  players[index].name = name;
}

function updateCurrentPlayer() {
  document.querySelectorAll('.player').forEach(p => {
    p.classList.remove('current-player');
  });

  const currentPlayerDiv = document.getElementById(`player-${currentPlayerIndex}`);
  if (currentPlayerDiv) {
    currentPlayerDiv.classList.add('current-player');
  }
}

function markDone() {
  if (!gameStarted) return;

  players[currentPlayerIndex].score++;
  nextPlayer();
  renderPlayers();
  updateCurrentPlayer();
}

function markUndone() {
  if (!gameStarted) return;

  if (players[currentPlayerIndex].score > 0) {
    players[currentPlayerIndex].score--;
  }
  nextPlayer();
  renderPlayers();
  updateCurrentPlayer();
}

function nextPlayer() {
  currentPlayerIndex = (currentPlayerIndex + 1) % players.length;
}

function finishGame() {
  const sortedPlayers = [...players].sort((a, b) => b.score - a.score);

  const rankingContainer = document.getElementById('rankingList');
  rankingContainer.innerHTML = '';

  sortedPlayers.forEach((player, index) => {
    const rankingItem = document.createElement('div');
    rankingItem.className = 'ranking-item';

    let medal = '';
    if (index === 0) medal = 'ü•á';
    else if (index === 1) medal = 'ü•à';
    else if (index === 2) medal = 'ü•â';
    else medal = `${index + 1}.`;

    rankingItem.innerHTML = `
      <span class="ranking-position">${medal}</span>
      <span class="ranking-name">${player.name}</span>
      <span class="ranking-score">${player.score} —Ç–æ—á–∫–∏</span>
    `;

    rankingContainer.appendChild(rankingItem);
  });

  document.getElementById('resultsModal').style.display = 'flex';
}

function closeResults() {
  document.getElementById('resultsModal').style.display = 'none';
}

function resetGame() {
  gameStarted = false;
  currentPlayerIndex = 0;
  players = [];

  document.getElementById('resultsModal').style.display = 'none';
  document.getElementById('playerSetup').style.display = 'block';
  document.getElementById('playersContainer').style.display = 'none';
  document.getElementById('actionButtons').style.display = 'none';
  document.getElementById('finishGameBtn').style.display = 'none';
  document.getElementById('output').textContent = '–ù–∞—Ç–∏—Å–Ω–∏ –±—É—Ç–æ–Ω, –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—à!';
  document.getElementById('output').classList.add('initial-message');

  document.getElementById('playerCount').value = 2;
  setupPlayers();
}

function showTruth() {
  const output = document.getElementById("output");
  const truthText = getRandomItem("truths");
  
  if (gameStarted) {
    const currentPlayerName = players[currentPlayerIndex].name;
    output.textContent = `${currentPlayerName}: ${truthText}`;
  } else {
    output.textContent = truthText;
  }
  
  output.classList.remove("initial-message");
}

function showDare() {
  const output = document.getElementById("output");
  const dareText = getRandomItem("dares");
  
  if (gameStarted) {
    const currentPlayerName = players[currentPlayerIndex].name;
    output.textContent = `${currentPlayerName}: ${dareText}`;
  } else {
    output.textContent = dareText;
  }
  
  output.classList.remove("initial-message");
}
